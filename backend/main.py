from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, Dict, Any
import uvicorn
from services.game_manager import GameManager
from config import Config

# validate environment variables
try:
    Config.validate()
    print("All environment variables are set correctly.")
except ValueError as e:
    print(f"Error: {e}")
    Config.print_setup_instructions()
    exit(1)

app = FastAPI(title="Personalized Adventure Game API", version="1.0.0")

# CORS settings (allow all origins) 
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# game manager instance (for managing the game state)
game_manager = GameManager()

# request/response model (for the chat API)
class ChatRequest(BaseModel):
    player_id: str
    message: str

class ChatResponse(BaseModel):
    npc_response: str
    stage_progress: Dict[str, Any]
    map_recommendation: Optional[Dict[str, Any]]
    game_completed: bool
    current_stage: int
    player_info: Dict[str, Any]

class NewGameResponse(BaseModel):
    player_id: str
    welcome_message: str

@app.post("/game/new", response_model=NewGameResponse)
async def create_new_game():
    """create a new game"""
    try:
        player_id = game_manager.create_new_game()
        game_state = game_manager.active_games[player_id]
        
        # get the welcome message
        welcome_message = game_state.conversation_history[0]["message"] if game_state.conversation_history else ""
        
        return NewGameResponse(
            player_id=player_id,
            welcome_message=welcome_message
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"game creation error: {str(e)}")

@app.post("/game/chat", response_model=ChatResponse)
async def chat_with_npc(request: ChatRequest):
    """chat with NPC"""
    try:
        result = game_manager.process_player_message(request.player_id, request.message)
        
        if "error" in result:
            raise HTTPException(status_code=400, detail=result["error"])
        
        return ChatResponse(
            npc_response=result["npc_response"],
            stage_progress=result["stage_progress"],
            map_recommendation=result["map_recommendation"],
            game_completed=result["game_completed"],
            current_stage=result["current_stage"],
            player_info=result["player_info"]
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"chat processing error: {str(e)}")

@app.get("/game/generated-maps")
async def get_generated_maps():
    """return the metadata of the maps generated by gpt image generation"""
    try:
        generated_maps = game_manager.npc_service.map_recommender.get_generated_maps()
        return generated_maps
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"error getting generated maps: {str(e)}")

@app.post("/game/next-stage/{player_id}")
async def advance_to_next_stage(player_id: str):
    """advance to the next stage"""
    try:
        result = game_manager.advance_to_next_stage(player_id)
        
        if "error" in result:
            raise HTTPException(status_code=400, detail=result["error"])
        
        # if there is a stage introduction message, include it in the message
        message = "advance to the next stage!"
        if result.get("stage_intro_message"):
            message = result["stage_intro_message"]
        
        return {
            "message": message,
            "stage_progress": result.get("stage_progress"),
            "map_recommendation": result.get("map_recommendation"),
            "game_completed": result.get("game_completed", False),
            "current_stage": result.get("current_stage"),
            "player_info": result.get("player_info"),
            "stage_intro_message": result.get("stage_intro_message")
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"stage progression error: {str(e)}")

@app.post("/game/enemy-defeated/{player_id}")
async def enemy_defeated(player_id: str):
    """API called when the enemy is defeated"""
    try:
        if player_id not in game_manager.active_games:
            raise HTTPException(status_code=400, detail="game not found")
        
        game_state = game_manager.active_games[player_id]
        
        # update the enemy status
        game_state.monster_defeated = True
        
        print(f"âœ… enemy defeated - Player: {player_id}, Stage: {game_state.current_stage.value}")
        
        # check if the stage is complete
        is_stage_complete = game_manager.npc_service.stage_manager.is_stage_complete(game_state)
        
        return {
            "message": "Enemy defeated!",
            "monster_defeated": True,
            "stage_complete": is_stage_complete,
            "current_stage": game_state.current_stage.value,
            "can_advance": is_stage_complete
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"enemy defeat processing error: {str(e)}")

@app.post("/game/reset-enemy-status/{player_id}")
async def reset_enemy_status(player_id: str):
    """reset the enemy status when a new stage starts"""
    try:
        if player_id not in game_manager.active_games:
            raise HTTPException(status_code=400, detail="game not found")
        
        game_state = game_manager.active_games[player_id]
        game_state.monster_defeated = False
        
        print(f"ðŸ”„ enemy status initialization - Player: {player_id}, Stage: {game_state.current_stage.value}")
        
        return {
            "message": "enemy status initialization completed",
            "monster_defeated": False,
            "current_stage": game_state.current_stage.value
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"status initialization error: {str(e)}")

@app.get("/health")
async def health_check():
    """check the server status"""
    return {"status": "healthy", "service": "Personalized Adventure Game API"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
